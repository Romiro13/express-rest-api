services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - .env
      - .env.local
    extra_hosts:
      - "localhost:host-gateway"
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - express-network
    develop:
      watch:
        - action: sync
          path: ./src
          target: /app/src
        - action: rebuild
          path: ./package.json

  mongo:
    image: mongo:8
    container_name: mongo
    hostname: mongo
    restart: unless-stopped
    command: ["--replSet", "rs0", "--bind_ip_all"]
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - express-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  init-replica:
    image: mongo:8
    container_name: mongo-init-replica
    volumes:
      - replica-data:/data/db:ro
    networks:
      - express-network
    command: >
      bash -c "sleep 5 &&
      mongosh --host mongo --eval '
      rs.initiate({
        _id: \"rs0\",
        members: [
          { _id: 0, host: \"localhost:27017\" }
        ]
      })' || true"
    depends_on:
      mongo:
        condition: service_healthy

networks:
  express-network:
    driver: bridge

volumes:
  mongo-data:
  replica-data:
